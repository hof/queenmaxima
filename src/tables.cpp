// QueenMaxima, a chess playing program. 
// Copyright (C) 1996-2013 Erik van het Hof and Hermen Reitsma 
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
// 

int WEAK_ISOLANI[64] = 
{
	0, 0, 0, 0, 0, 0, 0, 0,
	700,800,850,900,900,850,800,700,
        700,800,860,910,910,860,800,700,
	700,800,870,920,920,870,800,700,
	700,800,900,950,950,900,800,700,
	700,800,950,990,990,950,800,700,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0
};

int ISOLANI_TABLE[64] = 
{
	0, 0, 0, 0, 0, 0, 0, 0,
        750,850,900,950,950,900,850,750,
        750,850,910,960,960,910,850,750,
        750,850,920,970,970,920,850,750,
        800,900,950,1000,1000,950,900,800,
        850,950,1000,1050,1050,1000,950,850,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0
};

int PAWN_TABLE[64] =
{
        0,  0, 0, 0, 0, 0,  0,  0,
        800,900,950,1000,1000,950,900,800,
	810,910, 970,1020,1020, 970,910,810, 
	820,920,1000,1050,1050,1000,920,820,
	850,950,1050,1100,1100,1050,950,850,
	900,1000,1100,1150,1150,1100,1000,900,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0
};

int ISOLATED_PASSER[64] =
{
        0,  0, 0, 0, 0, 0,  0,  0,
       1000,1000,1000,1050,1050,1000,1000,1000,
       1050,1050,1050,1100,1100,1050,1050,1050,
       1100,1100,1150,1200,1200,1150,1100,1100,
       1200,1200,1250,1300,1300,1250,1200,1200,
       1300,1300,1350,1400,1400,1350,1300,1300,
       1600,1600,1650,1700,1700,1650,1600,1600, 
        0, 0, 0, 0, 0, 0, 0, 0
};

int PASSER_TABLE[64] =
{
	  0,  0, 0, 0, 0, 0,  0,  0,
       1100,1100,1100,1150,1150,1100,1100,1100,
       1150,1150,1150,1200,1200,1150,1150,1150,
       1200,1200,1250,1300,1300,1250,1200,1200,
       1300,1300,1350,1400,1400,1350,1300,1300,
       1500,1500,1450,1500,1500,1450,1500,1500,
       1900,1900,1950,2000,2000,1950,1900,1900,
        0, 0, 0, 0, 0, 0, 0, 0

};

int CONNECTED_PASSER[64] =
{
    0,  0, 0, 0, 0, 0,  0,  0,
       1200,1200,1200,1250,1250,1200,1200,1200,
       1250,1250,1250,1300,1300,1250,1250,1250,
       1300,1300,1350,1400,1400,1350,1300,1300,
       1400,1400,1450,1500,1500,1450,1400,1400,
       2000,2000,2000,2000,2000,2000,2000,2000,
       2500,2500,2500,2500,2500,2500,2500,2500,
        0, 0, 0, 0, 0, 0, 0, 0

};


int KNIGHT_TABLE[64] =
{
	2000, 2850, 2900, 2900, 2900, 2900, 2850, 2000,
	2850, 2950, 2970, 2970, 2970, 2970, 2950, 2850,
	2900, 2970, 3000, 3000, 3000, 3000, 2970, 2900,
	2910, 2980, 3010, 3050, 3050, 3010, 2980, 2910,
	2920, 2990, 3050, 3070, 3070, 3050, 2990, 2920,
	2950, 3000, 3050, 3070, 3070, 3050, 3000, 2950,
	2900, 2960, 2980, 2980, 2980, 2980, 2960, 2900,
	2000, 2860, 2910, 2910, 2910, 2910, 2860, 2000 
};

int BISHOP_TABLE[64] =
{
	3050, 3000, 3000, 3000, 3000, 3000, 3000, 3050, 
	3050, 3060, 3020, 3010, 3010, 3020, 3060, 3050,
	3050, 3050, 3050, 3020, 3020, 3050, 3050, 3050,
	3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050,
	3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050,
	3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050,
	3050, 3050, 3050, 3050, 3050, 3050, 3050, 3050 
};

int ROOK_TABLE[64] =
{
	5000, 5000, 5030, 5050, 5050, 5030, 5000, 5000,
	5000, 5000, 5030, 5050, 5050, 5030, 5000, 5000,
	5030, 5030, 5030, 5050, 5050, 5030, 5030, 5030,
	5050, 5050, 5050, 5050, 5050, 5050, 5050, 5050,
	5050, 5050, 5050, 5050, 5050, 5050, 5050, 5050,
	5030, 5030, 5030, 5050, 5050, 5030, 5030, 5030,
	5100, 5100, 5130, 5150, 5150, 5130, 5100, 5100,
	5100, 5100, 5130, 5150, 5150, 5130, 5100, 5100
};

int QUEEN_TABLE[64] =
{
        8900, 9000, 9000, 9010, 9010, 9000, 9000, 8900,
	9000, 9000, 9010, 9010, 9010, 9010, 9000, 9000,
	9000, 9005, 9010, 9010, 9010, 9010, 9005, 9000,
	9005, 9010, 9010, 9010, 9010, 9010, 9010, 9005,
	9005, 9010, 9010, 9010, 9010, 9010, 9010, 9005,
 	9005, 9010, 9010, 9010, 9010, 9010, 9010, 9005,
 	9005, 9010, 9010, 9010, 9010, 9010, 9010, 9005,
  	9005, 9010, 9010, 9010, 9010, 9010, 9010, 9005 
};

int KING_CENTRE_TABLE[64] =
{
       	   0,   25,   50,   75,   75,   50,   25,    0,
	  25,   50,  100,  150,  150,  100,   50,   25,
	  50,  100,  200,  250,  250,  200,  100,   50,
	  75,  150,  250,  350,  350,  250,  150,   75,
	 100,  200,  300,  400,  400,  300,  200,  100,
	  75,  150,  250,  350,  350,  250,  150,   70,
	  50,  100,  200,  250,  250,  200,  100,   50,
	   0,   50,  100,  150,  150,  100,   50,    0
};

int ROOK_MOBILITY [15] =
{
	-150, -75, -25, 0, 3, 5,10,15,20,25,30,35,40,45,50  
};

int BISHOP_MOBILITY [15] =
{
	-150, -70, -20, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55
};

int QUEEN_MOBILITY [30] = 
{
	-100, -50, -30, -20, -10,0,2,3,5,10,20,30,35,40,45,50,55,60,65,70,75,80,90,
	95,100,100,100,100,100,100
};

int ACTIVITY [8] =
{
	0, 50,75,100,100,100,100,100 
};

int BISHOP_PAIR [16] = {
	700,600,550,500,450,425,400,350,325,300,275,250,225,200,175,150 
};

int SHAKY_KING[6] =
{
	0, -50, -100, -250, -500, -750
};

int KNIGHT_ON_KING [6] = 
{
	25, 50, 75, 100, 125, 150
};

int BISHOP_ON_KING [6] = 
{
	25, 50, 75, 100, 125, 150 	
};

int ROOK_ON_KING [6] = 
{
	25, 50, 75, 200, 125, 150
};

int QUEEN_ON_KING [6] = 
{
	25, 50, 75, 100, 125, 150
};

int BLOCKED_PASSER[5] =
{
	-200, 0, 100, 150, 200
};

int KINGSUPPORTSPASSER[3] = {
	100, 200, 300
};

char WHITE_SQUARE [64] =
{
	0, 1, 0, 1, 0, 1, 0, 1, 
	1, 0, 1, 0, 1, 0, 1, 0,
	0, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 0,
	0, 1, 0, 1, 0, 1, 0, 1, 
	1, 0, 1, 0, 1, 0, 1, 0,
	0, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 0
};

char CENTRUM [64] = 
{ 
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1, 1, 1, 1, 0, 0,
 	0, 0, 1, 1, 1, 1, 0, 0,
 	0, 0, 1, 1, 1, 1, 0, 0,
 	0, 0, 1, 1, 1, 1, 0, 0,
 	0, 0, 1, 1, 1, 1, 0, 0,
 	0, 0, 1, 1, 1, 1, 0, 0,
 	0, 0, 0, 0, 0, 0, 0, 0
};




